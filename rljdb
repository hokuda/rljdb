#!/usr/bin/python3
# -*- coding: utf-8 -*-

"""
rljdb wrapper script
"""

import sys
import os
import re
from distutils.spawn import find_executable
import threading
try:
    import tornado.ioloop
    import tornado.web
    import tornado.websocket
    HAS_TORNADO=True
except:
    HAS_TORNADO=False
import asyncio

HAS_GOTTY = find_executable('gotty') != None
BINDIR = os.path.abspath(os.path.dirname(__file__))
HISTORY_FILE="./rljdb.history";
RLWRAP_LOG_FILE="./rljdb.log";
PORT=55555

cl = []

class WebSocketInfoHandler(tornado.websocket.WebSocketHandler):
    # where, locals, dump this, list
    def check_origin(self, origin):
        return True

    def open(self):
        if self not in cl:
            cl.append(self)

    def on_message(self, message):
        for client in cl:
            client.write_message(message)
 
    def on_close(self):
        if self in cl:
            cl.remove(self)
 
class WebSocketListHandler(tornado.websocket.WebSocketHandler):
    # where, locals, dump this, list
    def check_origin(self, origin):
        return True

    def open(self):
        if self not in cl:
            cl.append(self)

    def on_message(self, message):
        for client in cl:
            client.write_message(message)
 
    def on_close(self):
        if self in cl:
            cl.remove(self)
 
class WebSocketRootHandler(tornado.web.RequestHandler):
    def get(self):
        #self.render('spike/gotty-iframe.html')
        self.write("""<!DOCTYPE html>
<html style="height: 100%; font-size: 12px;">
  <head>
    <title>rljdb</title>
    <meta http-equiv="Pragma" content="no-cache">
    <meta http-equiv="cache-control" content="no-cache">
    <meta http-equiv="expires" content="0">
  </head>
  <body style="height: 97%;">
    <div class="left" style="box-sizing: border-box; width: 50%; height: 100%; float: left;">
      <div id="list" class="box1" style="border: solid 0px; box-sizing: border-box; width: 100%; height: 50%; float: left; overflow: scroll; font-family: courier, monospace;">
        <pre>.</pre>
      </div>
      <div id="where" class="box2" style="border: solid 0px; box-sizing: border-box; width: 100%; height: 50%; float: left; overflow: scroll;">
        <pre>.</pre>
      </div>
    </div>
    <div class="right" style="box-sizing: border-box; width: 50%; height: 100%; float: left;">
      <div id="locals" class="box3" style="border: solid 0px; box-sizing: border-box; width: 100%; height: 30%; float: left; overflow: scroll; font-family: courier, monospace;">
        <pre>.</pre>
      </div>
      <div id="dump_this" class="box4" style="border: solid 0px; box-sizing: border-box; width: 100%; height: 30%; float: left; overflow: scroll;">
        <pre>.</pre>
      </div>
      <div id="gotty" class="box5" style="border: solid 0px; box-sizing: border-box; width: 100%; height: 40%; float: left;">
        <iframe width=100% height=100% src="http://localhost:""" + str(PORT + 1) + """/" sandbox="allow-forms allow-scripts allow-top-navigation allow-same-origin">
        </iframe>
      </div>
    </div>
  </body>
  <script type="text/javascript">
    var breakpoint_info_receiver = null;
    var filter_status_receiver = new WebSocket("ws://127.0.0.1:""" + str(PORT) + """/websocket");
    filter_status_receiver.onmessage = function(ev) {
        breakpoint_info_receiver = new WebSocket("ws://127.0.0.1:""" + str(PORT+2) + """/websocket");
        breakpoint_info_receiver.onmessage = function(ev) {
            var data = JSON.parse(ev.data);
            document.getElementById("where").firstElementChild.firstChild.nodeValue = data["where"];
            document.getElementById("list").firstElementChild.firstChild.nodeValue = data["list"];
            document.getElementById("locals").firstElementChild.firstChild.nodeValue = data["locals"];
    
            var dump_this = document.getElementById("dump_this");
            while (dump_this.firstChild) { dump_this.removeChild(dump_this.firstChild); }
            var pre = document.createElement("pre");
            pre.innerHTML = data["dump_this"];
            dump_this.appendChild(pre);
        };
        filter_status_receiver.close();
    };
  </script>
</html>""")
        self.flush()


class WebSocketServerThread(threading.Thread):

    """docstring for TestThread"""

    def __init__(self):
        super(WebSocketServerThread, self).__init__(daemon=True)

    def run(self):
        asyncio.set_event_loop(asyncio.new_event_loop())
        application = tornado.web.Application([
            (r"/", WebSocketRootHandler),
            (r"/websocket", WebSocketInfoHandler),
        ])
        application.listen(PORT, address='127.0.0.1')
        tornado.ioloop.IOLoop.instance().start()


if __name__ == '__main__':

    thread = WebSocketServerThread()
    thread.start()

    rlwrap = find_executable('rlwrap')
    if rlwrap is None: exit("Not found rlwrap")
    rljdb_filter = BINDIR + '/rljdb_filter'
    rlwrap_opts = ['-H', HISTORY_FILE,
                   '-l', RLWRAP_LOG_FILE,
                   '-w', '200',
                   #'-pRED',
                   '-pBLUE',
                   '-C', 'jdb',
                   '-b', "' .'",
                   '-z',
                   rljdb_filter]
    jdb = find_executable('jdb')
    jdb_opts = sys.argv[1:]
    cmd = [rlwrap] + rlwrap_opts + [jdb] + jdb_opts

    if HAS_TORNADO and HAS_GOTTY:
        cmdline = "gotty -a 127.0.0.1 -p " + str(PORT+1) + " -w bash -c \"sleep 1; " + ' '.join(cmd) + "\""
        print(cmdline)
        print('\nRunning in web mode. Access http://localhost:55555\n')
        os.system(cmdline)
    else:
        print('Running in terminal mode.')
        os.execvp(cmd[0], cmd)
